/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.idetronic.portlet.model.impl;

import com.idetronic.portlet.model.ServiceExperience;
import com.idetronic.portlet.model.ServiceExperienceModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ServiceExperience service. Represents a row in the &quot;ide_ServiceExperience&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.idetronic.portlet.model.ServiceExperienceModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ServiceExperienceImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see ServiceExperienceImpl
 * @see com.idetronic.portlet.model.ServiceExperience
 * @see com.idetronic.portlet.model.ServiceExperienceModel
 * @generated
 */
public class ServiceExperienceModelImpl extends BaseModelImpl<ServiceExperience>
	implements ServiceExperienceModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a service experience model instance should use the {@link com.idetronic.portlet.model.ServiceExperience} interface instead.
	 */
	public static final String TABLE_NAME = "ide_ServiceExperience";
	public static final Object[][] TABLE_COLUMNS = {
			{ "serviceExperienceId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "startDate", Types.TIMESTAMP },
			{ "title", Types.VARCHAR },
			{ "endDate", Types.TIMESTAMP },
			{ "serviceData", Types.VARCHAR },
			{ "status", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table ide_ServiceExperience (serviceExperienceId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,startDate DATE null,title VARCHAR(75) null,endDate DATE null,serviceData VARCHAR(75) null,status INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table ide_ServiceExperience";
	public static final String ORDER_BY_JPQL = " ORDER BY serviceExperience.startDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY ide_ServiceExperience.startDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.idetronic.portlet.model.ServiceExperience"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.idetronic.portlet.model.ServiceExperience"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.idetronic.portlet.model.ServiceExperience"),
			true);
	public static long USERID_COLUMN_BITMASK = 1L;
	public static long STARTDATE_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.idetronic.portlet.model.ServiceExperience"));

	public ServiceExperienceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _serviceExperienceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setServiceExperienceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _serviceExperienceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ServiceExperience.class;
	}

	@Override
	public String getModelClassName() {
		return ServiceExperience.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("serviceExperienceId", getServiceExperienceId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("startDate", getStartDate());
		attributes.put("title", getTitle());
		attributes.put("endDate", getEndDate());
		attributes.put("serviceData", getServiceData());
		attributes.put("status", getStatus());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long serviceExperienceId = (Long)attributes.get("serviceExperienceId");

		if (serviceExperienceId != null) {
			setServiceExperienceId(serviceExperienceId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Date startDate = (Date)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		Date endDate = (Date)attributes.get("endDate");

		if (endDate != null) {
			setEndDate(endDate);
		}

		String serviceData = (String)attributes.get("serviceData");

		if (serviceData != null) {
			setServiceData(serviceData);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}
	}

	@Override
	public long getServiceExperienceId() {
		return _serviceExperienceId;
	}

	@Override
	public void setServiceExperienceId(long serviceExperienceId) {
		_serviceExperienceId = serviceExperienceId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_columnBitmask = -1L;

		_startDate = startDate;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		_endDate = endDate;
	}

	@Override
	public String getServiceData() {
		if (_serviceData == null) {
			return StringPool.BLANK;
		}
		else {
			return _serviceData;
		}
	}

	@Override
	public void setServiceData(String serviceData) {
		_serviceData = serviceData;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ServiceExperience.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ServiceExperience toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ServiceExperience)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ServiceExperienceImpl serviceExperienceImpl = new ServiceExperienceImpl();

		serviceExperienceImpl.setServiceExperienceId(getServiceExperienceId());
		serviceExperienceImpl.setCompanyId(getCompanyId());
		serviceExperienceImpl.setUserId(getUserId());
		serviceExperienceImpl.setUserName(getUserName());
		serviceExperienceImpl.setCreateDate(getCreateDate());
		serviceExperienceImpl.setModifiedDate(getModifiedDate());
		serviceExperienceImpl.setStartDate(getStartDate());
		serviceExperienceImpl.setTitle(getTitle());
		serviceExperienceImpl.setEndDate(getEndDate());
		serviceExperienceImpl.setServiceData(getServiceData());
		serviceExperienceImpl.setStatus(getStatus());

		serviceExperienceImpl.resetOriginalValues();

		return serviceExperienceImpl;
	}

	@Override
	public int compareTo(ServiceExperience serviceExperience) {
		int value = 0;

		value = DateUtil.compareTo(getStartDate(),
				serviceExperience.getStartDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ServiceExperience)) {
			return false;
		}

		ServiceExperience serviceExperience = (ServiceExperience)obj;

		long primaryKey = serviceExperience.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ServiceExperienceModelImpl serviceExperienceModelImpl = this;

		serviceExperienceModelImpl._originalUserId = serviceExperienceModelImpl._userId;

		serviceExperienceModelImpl._setOriginalUserId = false;

		serviceExperienceModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ServiceExperience> toCacheModel() {
		ServiceExperienceCacheModel serviceExperienceCacheModel = new ServiceExperienceCacheModel();

		serviceExperienceCacheModel.serviceExperienceId = getServiceExperienceId();

		serviceExperienceCacheModel.companyId = getCompanyId();

		serviceExperienceCacheModel.userId = getUserId();

		serviceExperienceCacheModel.userName = getUserName();

		String userName = serviceExperienceCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			serviceExperienceCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			serviceExperienceCacheModel.createDate = createDate.getTime();
		}
		else {
			serviceExperienceCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			serviceExperienceCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			serviceExperienceCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date startDate = getStartDate();

		if (startDate != null) {
			serviceExperienceCacheModel.startDate = startDate.getTime();
		}
		else {
			serviceExperienceCacheModel.startDate = Long.MIN_VALUE;
		}

		serviceExperienceCacheModel.title = getTitle();

		String title = serviceExperienceCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			serviceExperienceCacheModel.title = null;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			serviceExperienceCacheModel.endDate = endDate.getTime();
		}
		else {
			serviceExperienceCacheModel.endDate = Long.MIN_VALUE;
		}

		serviceExperienceCacheModel.serviceData = getServiceData();

		String serviceData = serviceExperienceCacheModel.serviceData;

		if ((serviceData != null) && (serviceData.length() == 0)) {
			serviceExperienceCacheModel.serviceData = null;
		}

		serviceExperienceCacheModel.status = getStatus();

		return serviceExperienceCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{serviceExperienceId=");
		sb.append(getServiceExperienceId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append(", serviceData=");
		sb.append(getServiceData());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.idetronic.portlet.model.ServiceExperience");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>serviceExperienceId</column-name><column-value><![CDATA[");
		sb.append(getServiceExperienceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>serviceData</column-name><column-value><![CDATA[");
		sb.append(getServiceData());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ServiceExperience.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ServiceExperience.class
		};
	private long _serviceExperienceId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private Date _startDate;
	private String _title;
	private Date _endDate;
	private String _serviceData;
	private int _status;
	private long _columnBitmask;
	private ServiceExperience _escapedModel;
}
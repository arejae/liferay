/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.idetronic.portlet.model.impl;

import com.idetronic.portlet.model.OrgChart;
import com.idetronic.portlet.model.OrgChartModel;
import com.idetronic.portlet.service.persistence.OrgChartPK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.util.PortalUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the OrgChart service. Represents a row in the &quot;ide_OrgChart&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.idetronic.portlet.model.OrgChartModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OrgChartImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see OrgChartImpl
 * @see com.idetronic.portlet.model.OrgChart
 * @see com.idetronic.portlet.model.OrgChartModel
 * @generated
 */
public class OrgChartModelImpl extends BaseModelImpl<OrgChart>
	implements OrgChartModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a org chart model instance should use the {@link com.idetronic.portlet.model.OrgChart} interface instead.
	 */
	public static final String TABLE_NAME = "ide_OrgChart";
	public static final Object[][] TABLE_COLUMNS = {
			{ "userId", Types.BIGINT },
			{ "parentId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table ide_OrgChart (userId LONG not null,parentId LONG not null,primary key (userId, parentId))";
	public static final String TABLE_SQL_DROP = "drop table ide_OrgChart";
	public static final String ORDER_BY_JPQL = " ORDER BY orgChart.id.userId ASC, orgChart.id.parentId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ide_OrgChart.userId ASC, ide_OrgChart.parentId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.idetronic.portlet.model.OrgChart"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.idetronic.portlet.model.OrgChart"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.idetronic.portlet.model.OrgChart"),
			true);
	public static long USERID_COLUMN_BITMASK = 1L;
	public static long PARENTID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.idetronic.portlet.model.OrgChart"));

	public OrgChartModelImpl() {
	}

	@Override
	public OrgChartPK getPrimaryKey() {
		return new OrgChartPK(_userId, _parentId);
	}

	@Override
	public void setPrimaryKey(OrgChartPK primaryKey) {
		setUserId(primaryKey.userId);
		setParentId(primaryKey.parentId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new OrgChartPK(_userId, _parentId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((OrgChartPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return OrgChart.class;
	}

	@Override
	public String getModelClassName() {
		return OrgChart.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("userId", getUserId());
		attributes.put("parentId", getParentId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long parentId = (Long)attributes.get("parentId");

		if (parentId != null) {
			setParentId(parentId);
		}
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public long getParentId() {
		return _parentId;
	}

	@Override
	public void setParentId(long parentId) {
		_parentId = parentId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public OrgChart toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (OrgChart)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		OrgChartImpl orgChartImpl = new OrgChartImpl();

		orgChartImpl.setUserId(getUserId());
		orgChartImpl.setParentId(getParentId());

		orgChartImpl.resetOriginalValues();

		return orgChartImpl;
	}

	@Override
	public int compareTo(OrgChart orgChart) {
		OrgChartPK primaryKey = orgChart.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof OrgChart)) {
			return false;
		}

		OrgChart orgChart = (OrgChart)obj;

		OrgChartPK primaryKey = orgChart.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		OrgChartModelImpl orgChartModelImpl = this;

		orgChartModelImpl._originalUserId = orgChartModelImpl._userId;

		orgChartModelImpl._setOriginalUserId = false;

		orgChartModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<OrgChart> toCacheModel() {
		OrgChartCacheModel orgChartCacheModel = new OrgChartCacheModel();

		orgChartCacheModel.userId = getUserId();

		orgChartCacheModel.parentId = getParentId();

		return orgChartCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{userId=");
		sb.append(getUserId());
		sb.append(", parentId=");
		sb.append(getParentId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.idetronic.portlet.model.OrgChart");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentId</column-name><column-value><![CDATA[");
		sb.append(getParentId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = OrgChart.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			OrgChart.class
		};
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _parentId;
	private long _columnBitmask;
	private OrgChart _escapedModel;
}
/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.idetronic.subur.model.impl;

import com.idetronic.subur.model.Division;
import com.idetronic.subur.model.DivisionModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Division service. Represents a row in the &quot;subur_Division&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.idetronic.subur.model.DivisionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DivisionImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see DivisionImpl
 * @see com.idetronic.subur.model.Division
 * @see com.idetronic.subur.model.DivisionModel
 * @generated
 */
public class DivisionModelImpl extends BaseModelImpl<Division>
	implements DivisionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a division model instance should use the {@link com.idetronic.subur.model.Division} interface instead.
	 */
	public static final String TABLE_NAME = "subur_Division";
	public static final Object[][] TABLE_COLUMNS = {
			{ "divisionId", Types.BIGINT },
			{ "parentId", Types.BIGINT },
			{ "divisionName", Types.VARCHAR },
			{ "depositable", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table subur_Division (divisionId LONG not null primary key,parentId LONG,divisionName VARCHAR(75) null,depositable BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table subur_Division";
	public static final String ORDER_BY_JPQL = " ORDER BY division.divisionId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY subur_Division.divisionId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.idetronic.subur.model.Division"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.idetronic.subur.model.Division"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.idetronic.subur.model.Division"),
			true);
	public static long DEPOSITABLE_COLUMN_BITMASK = 1L;
	public static long DIVISIONID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.idetronic.subur.model.Division"));

	public DivisionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _divisionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDivisionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _divisionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Division.class;
	}

	@Override
	public String getModelClassName() {
		return Division.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("divisionId", getDivisionId());
		attributes.put("parentId", getParentId());
		attributes.put("divisionName", getDivisionName());
		attributes.put("depositable", getDepositable());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long divisionId = (Long)attributes.get("divisionId");

		if (divisionId != null) {
			setDivisionId(divisionId);
		}

		Long parentId = (Long)attributes.get("parentId");

		if (parentId != null) {
			setParentId(parentId);
		}

		String divisionName = (String)attributes.get("divisionName");

		if (divisionName != null) {
			setDivisionName(divisionName);
		}

		Boolean depositable = (Boolean)attributes.get("depositable");

		if (depositable != null) {
			setDepositable(depositable);
		}
	}

	@Override
	public long getDivisionId() {
		return _divisionId;
	}

	@Override
	public void setDivisionId(long divisionId) {
		_divisionId = divisionId;
	}

	@Override
	public long getParentId() {
		return _parentId;
	}

	@Override
	public void setParentId(long parentId) {
		_parentId = parentId;
	}

	@Override
	public String getDivisionName() {
		if (_divisionName == null) {
			return StringPool.BLANK;
		}
		else {
			return _divisionName;
		}
	}

	@Override
	public void setDivisionName(String divisionName) {
		_divisionName = divisionName;
	}

	@Override
	public boolean getDepositable() {
		return _depositable;
	}

	@Override
	public boolean isDepositable() {
		return _depositable;
	}

	@Override
	public void setDepositable(boolean depositable) {
		_columnBitmask |= DEPOSITABLE_COLUMN_BITMASK;

		if (!_setOriginalDepositable) {
			_setOriginalDepositable = true;

			_originalDepositable = _depositable;
		}

		_depositable = depositable;
	}

	public boolean getOriginalDepositable() {
		return _originalDepositable;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Division.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Division toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Division)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DivisionImpl divisionImpl = new DivisionImpl();

		divisionImpl.setDivisionId(getDivisionId());
		divisionImpl.setParentId(getParentId());
		divisionImpl.setDivisionName(getDivisionName());
		divisionImpl.setDepositable(getDepositable());

		divisionImpl.resetOriginalValues();

		return divisionImpl;
	}

	@Override
	public int compareTo(Division division) {
		long primaryKey = division.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Division)) {
			return false;
		}

		Division division = (Division)obj;

		long primaryKey = division.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		DivisionModelImpl divisionModelImpl = this;

		divisionModelImpl._originalDepositable = divisionModelImpl._depositable;

		divisionModelImpl._setOriginalDepositable = false;

		divisionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Division> toCacheModel() {
		DivisionCacheModel divisionCacheModel = new DivisionCacheModel();

		divisionCacheModel.divisionId = getDivisionId();

		divisionCacheModel.parentId = getParentId();

		divisionCacheModel.divisionName = getDivisionName();

		String divisionName = divisionCacheModel.divisionName;

		if ((divisionName != null) && (divisionName.length() == 0)) {
			divisionCacheModel.divisionName = null;
		}

		divisionCacheModel.depositable = getDepositable();

		return divisionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{divisionId=");
		sb.append(getDivisionId());
		sb.append(", parentId=");
		sb.append(getParentId());
		sb.append(", divisionName=");
		sb.append(getDivisionName());
		sb.append(", depositable=");
		sb.append(getDepositable());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.idetronic.subur.model.Division");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>divisionId</column-name><column-value><![CDATA[");
		sb.append(getDivisionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentId</column-name><column-value><![CDATA[");
		sb.append(getParentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>divisionName</column-name><column-value><![CDATA[");
		sb.append(getDivisionName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>depositable</column-name><column-value><![CDATA[");
		sb.append(getDepositable());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Division.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Division.class
		};
	private long _divisionId;
	private long _parentId;
	private String _divisionName;
	private boolean _depositable;
	private boolean _originalDepositable;
	private boolean _setOriginalDepositable;
	private long _columnBitmask;
	private Division _escapedModel;
}
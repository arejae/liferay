/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.idetronic.subur.model.impl;

import com.idetronic.subur.model.ItemSubject;
import com.idetronic.subur.model.ItemSubjectModel;
import com.idetronic.subur.service.persistence.ItemSubjectPK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ItemSubject service. Represents a row in the &quot;subur_ItemSubject&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.idetronic.subur.model.ItemSubjectModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ItemSubjectImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see ItemSubjectImpl
 * @see com.idetronic.subur.model.ItemSubject
 * @see com.idetronic.subur.model.ItemSubjectModel
 * @generated
 */
public class ItemSubjectModelImpl extends BaseModelImpl<ItemSubject>
	implements ItemSubjectModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a item subject model instance should use the {@link com.idetronic.subur.model.ItemSubject} interface instead.
	 */
	public static final String TABLE_NAME = "subur_ItemSubject";
	public static final Object[][] TABLE_COLUMNS = {
			{ "itemId", Types.BIGINT },
			{ "subjectId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table subur_ItemSubject (itemId LONG not null,subjectId LONG not null,primary key (itemId, subjectId))";
	public static final String TABLE_SQL_DROP = "drop table subur_ItemSubject";
	public static final String ORDER_BY_JPQL = " ORDER BY itemSubject.id.itemId ASC, itemSubject.id.subjectId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY subur_ItemSubject.itemId ASC, subur_ItemSubject.subjectId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.idetronic.subur.model.ItemSubject"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.idetronic.subur.model.ItemSubject"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.idetronic.subur.model.ItemSubject"),
			true);
	public static long ITEMID_COLUMN_BITMASK = 1L;
	public static long SUBJECTID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.idetronic.subur.model.ItemSubject"));

	public ItemSubjectModelImpl() {
	}

	@Override
	public ItemSubjectPK getPrimaryKey() {
		return new ItemSubjectPK(_itemId, _subjectId);
	}

	@Override
	public void setPrimaryKey(ItemSubjectPK primaryKey) {
		setItemId(primaryKey.itemId);
		setSubjectId(primaryKey.subjectId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new ItemSubjectPK(_itemId, _subjectId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((ItemSubjectPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return ItemSubject.class;
	}

	@Override
	public String getModelClassName() {
		return ItemSubject.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("itemId", getItemId());
		attributes.put("subjectId", getSubjectId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long itemId = (Long)attributes.get("itemId");

		if (itemId != null) {
			setItemId(itemId);
		}

		Long subjectId = (Long)attributes.get("subjectId");

		if (subjectId != null) {
			setSubjectId(subjectId);
		}
	}

	@Override
	public long getItemId() {
		return _itemId;
	}

	@Override
	public void setItemId(long itemId) {
		_columnBitmask |= ITEMID_COLUMN_BITMASK;

		if (!_setOriginalItemId) {
			_setOriginalItemId = true;

			_originalItemId = _itemId;
		}

		_itemId = itemId;
	}

	public long getOriginalItemId() {
		return _originalItemId;
	}

	@Override
	public long getSubjectId() {
		return _subjectId;
	}

	@Override
	public void setSubjectId(long subjectId) {
		_columnBitmask |= SUBJECTID_COLUMN_BITMASK;

		if (!_setOriginalSubjectId) {
			_setOriginalSubjectId = true;

			_originalSubjectId = _subjectId;
		}

		_subjectId = subjectId;
	}

	public long getOriginalSubjectId() {
		return _originalSubjectId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ItemSubject toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ItemSubject)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ItemSubjectImpl itemSubjectImpl = new ItemSubjectImpl();

		itemSubjectImpl.setItemId(getItemId());
		itemSubjectImpl.setSubjectId(getSubjectId());

		itemSubjectImpl.resetOriginalValues();

		return itemSubjectImpl;
	}

	@Override
	public int compareTo(ItemSubject itemSubject) {
		ItemSubjectPK primaryKey = itemSubject.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ItemSubject)) {
			return false;
		}

		ItemSubject itemSubject = (ItemSubject)obj;

		ItemSubjectPK primaryKey = itemSubject.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		ItemSubjectModelImpl itemSubjectModelImpl = this;

		itemSubjectModelImpl._originalItemId = itemSubjectModelImpl._itemId;

		itemSubjectModelImpl._setOriginalItemId = false;

		itemSubjectModelImpl._originalSubjectId = itemSubjectModelImpl._subjectId;

		itemSubjectModelImpl._setOriginalSubjectId = false;

		itemSubjectModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ItemSubject> toCacheModel() {
		ItemSubjectCacheModel itemSubjectCacheModel = new ItemSubjectCacheModel();

		itemSubjectCacheModel.itemId = getItemId();

		itemSubjectCacheModel.subjectId = getSubjectId();

		return itemSubjectCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{itemId=");
		sb.append(getItemId());
		sb.append(", subjectId=");
		sb.append(getSubjectId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.idetronic.subur.model.ItemSubject");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>itemId</column-name><column-value><![CDATA[");
		sb.append(getItemId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subjectId</column-name><column-value><![CDATA[");
		sb.append(getSubjectId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ItemSubject.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ItemSubject.class
		};
	private long _itemId;
	private long _originalItemId;
	private boolean _setOriginalItemId;
	private long _subjectId;
	private long _originalSubjectId;
	private boolean _setOriginalSubjectId;
	private long _columnBitmask;
	private ItemSubject _escapedModel;
}
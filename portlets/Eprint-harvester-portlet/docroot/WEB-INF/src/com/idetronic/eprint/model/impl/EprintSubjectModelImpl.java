/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.idetronic.eprint.model.impl;

import com.idetronic.eprint.model.EprintSubject;
import com.idetronic.eprint.model.EprintSubjectModel;
import com.idetronic.eprint.model.EprintSubjectSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EprintSubject service. Represents a row in the &quot;eprint_subjects&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.idetronic.eprint.model.EprintSubjectModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EprintSubjectImpl}.
 * </p>
 *
 * @author Mazlan Mat
 * @see EprintSubjectImpl
 * @see com.idetronic.eprint.model.EprintSubject
 * @see com.idetronic.eprint.model.EprintSubjectModel
 * @generated
 */
@JSON(strict = true)
public class EprintSubjectModelImpl extends BaseModelImpl<EprintSubject>
	implements EprintSubjectModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a eprint subject model instance should use the {@link com.idetronic.eprint.model.EprintSubject} interface instead.
	 */
	public static final String TABLE_NAME = "eprint_subjects";
	public static final Object[][] TABLE_COLUMNS = {
			{ "eprintId", Types.BIGINT },
			{ "pos", Types.BIGINT },
			{ "subjects", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table eprint_subjects (eprintId LONG not null primary key,pos LONG,subjects VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table eprint_subjects";
	public static final String DATA_SOURCE = "eprintDatasource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.idetronic.eprint.model.EprintSubject"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.idetronic.eprint.model.EprintSubject"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static EprintSubject toModel(EprintSubjectSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		EprintSubject model = new EprintSubjectImpl();

		model.setEprintId(soapModel.getEprintId());
		model.setPos(soapModel.getPos());
		model.setSubjects(soapModel.getSubjects());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<EprintSubject> toModels(EprintSubjectSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<EprintSubject> models = new ArrayList<EprintSubject>(soapModels.length);

		for (EprintSubjectSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.idetronic.eprint.model.EprintSubject"));

	public EprintSubjectModelImpl() {
	}

	public long getPrimaryKey() {
		return _eprintId;
	}

	public void setPrimaryKey(long primaryKey) {
		setEprintId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_eprintId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return EprintSubject.class;
	}

	public String getModelClassName() {
		return EprintSubject.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("eprintId", getEprintId());
		attributes.put("pos", getPos());
		attributes.put("subjects", getSubjects());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long eprintId = (Long)attributes.get("eprintId");

		if (eprintId != null) {
			setEprintId(eprintId);
		}

		Long pos = (Long)attributes.get("pos");

		if (pos != null) {
			setPos(pos);
		}

		String subjects = (String)attributes.get("subjects");

		if (subjects != null) {
			setSubjects(subjects);
		}
	}

	@JSON
	public long getEprintId() {
		return _eprintId;
	}

	public void setEprintId(long eprintId) {
		_eprintId = eprintId;
	}

	@JSON
	public long getPos() {
		return _pos;
	}

	public void setPos(long pos) {
		_pos = pos;
	}

	@JSON
	public String getSubjects() {
		if (_subjects == null) {
			return StringPool.BLANK;
		}
		else {
			return _subjects;
		}
	}

	public void setSubjects(String subjects) {
		_subjects = subjects;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			EprintSubject.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EprintSubject toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (EprintSubject)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	public EprintSubject toUnescapedModel() {
		return (EprintSubject)this;
	}

	@Override
	public Object clone() {
		EprintSubjectImpl eprintSubjectImpl = new EprintSubjectImpl();

		eprintSubjectImpl.setEprintId(getEprintId());
		eprintSubjectImpl.setPos(getPos());
		eprintSubjectImpl.setSubjects(getSubjects());

		eprintSubjectImpl.resetOriginalValues();

		return eprintSubjectImpl;
	}

	public int compareTo(EprintSubject eprintSubject) {
		long primaryKey = eprintSubject.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EprintSubject)) {
			return false;
		}

		EprintSubject eprintSubject = (EprintSubject)obj;

		long primaryKey = eprintSubject.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<EprintSubject> toCacheModel() {
		EprintSubjectCacheModel eprintSubjectCacheModel = new EprintSubjectCacheModel();

		eprintSubjectCacheModel.eprintId = getEprintId();

		eprintSubjectCacheModel.pos = getPos();

		eprintSubjectCacheModel.subjects = getSubjects();

		String subjects = eprintSubjectCacheModel.subjects;

		if ((subjects != null) && (subjects.length() == 0)) {
			eprintSubjectCacheModel.subjects = null;
		}

		return eprintSubjectCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{eprintId=");
		sb.append(getEprintId());
		sb.append(", pos=");
		sb.append(getPos());
		sb.append(", subjects=");
		sb.append(getSubjects());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.idetronic.eprint.model.EprintSubject");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>eprintId</column-name><column-value><![CDATA[");
		sb.append(getEprintId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pos</column-name><column-value><![CDATA[");
		sb.append(getPos());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subjects</column-name><column-value><![CDATA[");
		sb.append(getSubjects());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = EprintSubject.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			EprintSubject.class
		};
	private long _eprintId;
	private long _pos;
	private String _subjects;
	private EprintSubject _escapedModel;
}